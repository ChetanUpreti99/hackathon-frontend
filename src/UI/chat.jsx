import styles from "@chatscope/chat-ui-kit-styles/dist/default/styles.min.css";
import {
	MainContainer,
	ChatContainer,
	MessageList,
	Message,
	MessageInput,
} from "@chatscope/chat-ui-kit-react";
import {
    useChat,
    ChatMessage,
    MessageContentType,
    MessageDirection,
    MessageStatus
} from "@chatscope/use-chat";
import {MessageContent, TextContent, User} from "@chatscope/use-chat";

export default function Chat(user){
	const {
		currentMessages, conversations, activeConversation, setActiveConversation,  sendMessage, getUser, currentMessage, setCurrentMessage,
		sendTyping, setCurrentUser
	} = useChat();
	
	const handleSend = (text) => {
			
		const message = new ChatMessage({
			id: "", // Id will be generated by storage generator, so here you can pass an empty string
			content: text,
			contentType: MessageContentType.TextHtml,
			senderId: user.id,
			direction: MessageDirection.Outgoing,
			status: MessageStatus.Sent
		});
		
		if ( activeConversation ) {
			sendMessage({
				message,
				conversationId: activeConversation.id,
				senderId: user.id,
			});
		}
	
	};
	const handleChange = (value) => {
        // Send typing indicator to the active conversation
        // You can call this method on each onChange event
        // because sendTyping method can throttle sending this event
        // So typing event will not be send to often to the server
        setCurrentMessage(value);
        if ( activeConversation ) {
            sendTyping({
                conversationId: activeConversation?.id,
                isTyping:true,
                userId: user.id,
                content: value, // Note! Most often you don't want to send what the user types, as this can violate his privacy!
                throttle: true
            });
        }
        
    }
	return(
		<div style={{ position: "relative", height: "500px" }}>
			<MainContainer>
				<ChatContainer>
					<MessageList>
						<Message
							model={{
								message: "Hello my friend",
								sentTime: "just now",
								sender: "Joe",
							}}
						/>
					</MessageList>
					<MessageInput placeholder="Type message here" onSend={handleSend} attachButton={false} onChange={handleChange}/>
				</ChatContainer>
			</MainContainer>
		</div>
	)
}